#ifndef __CTRCOMMON_PLATFORM_HPP__
#define __CTRCOMMON_PLATFORM_HPP__

#include "ctrcommon/types.hpp"

#include <string>

typedef enum {
    MODULE_COMMON = 0,
    MODULE_NN_KERNEL = 1,
    MODULE_NN_UTIL = 2,
    MODULE_NN_FILE_SERVER = 3,
    MODULE_NN_LOADER_SERVER = 4,
    MODULE_NN_TCB = 5,
    MODULE_NN_OS = 6,
    MODULE_NN_DBG = 7,
    MODULE_NN_DMNT = 8,
    MODULE_NN_PDN = 9,
    MODULE_NN_GX = 10,
    MODULE_NN_I2C = 11,
    MODULE_NN_GPIO = 12,
    MODULE_NN_DD = 13,
    MODULE_NN_CODEC = 14,
    MODULE_NN_SPI = 15,
    MODULE_NN_PXI = 16,
    MODULE_NN_FS = 17,
    MODULE_NN_DI = 18,
    MODULE_NN_HID = 19,
    MODULE_NN_CAMERA = 20,
    MODULE_NN_PI = 21,
    MODULE_NN_PM = 22,
    MODULE_NN_PMLOW = 23,
    MODULE_NN_FSI = 24,
    MODULE_NN_SRV = 25,
    MODULE_NN_NDM = 26,
    MODULE_NN_NWM = 27,
    MODULE_NN_SOCKET = 28,
    MODULE_NN_LDR = 29,
    MODULE_NN_ACC = 30,
    MODULE_NN_ROMFS = 31,
    MODULE_NN_AM = 32,
    MODULE_NN_HIO = 33,
    MODULE_NN_UPDATER = 34,
    MODULE_NN_MIC = 35,
    MODULE_NN_FND = 36,
    MODULE_NN_MP = 37,
    MODULE_NN_MPWL = 38,
    MODULE_NN_AC = 39,
    MODULE_NN_HTTP = 40,
    MODULE_NN_DSP = 41,
    MODULE_NN_SND = 42,
    MODULE_NN_DLP = 43,
    MODULE_NN_HIOLOW = 44,
    MODULE_NN_CSND = 45,
    MODULE_NN_SSL = 46,
    MODULE_NN_AMLOW = 47,
    MODULE_NN_NEX = 48,
    MODULE_NN_FRIENDS = 49,
    MODULE_NN_RDT = 50,
    MODULE_NN_APPLET = 51,
    MODULE_NN_NIM = 52,
    MODULE_NN_PTM = 53,
    MODULE_NN_MIDI = 54,
    MODULE_NN_MC = 55,
    MODULE_NN_SWC = 56,
    MODULE_NN_FATFS = 57,
    MODULE_NN_NGC = 58,
    MODULE_NN_CARD = 59,
    MODULE_NN_CARDNOR = 60,
    MODULE_NN_SDMC = 61,
    MODULE_NN_BOSS = 62,
    MODULE_NN_DBM = 63,
    MODULE_NN_CONFIG = 64,
    MODULE_NN_PS = 65,
    MODULE_NN_CEC = 66,
    MODULE_NN_IR = 67,
    MODULE_NN_UDS = 68,
    MODULE_NN_PL = 69,
    MODULE_NN_CUP = 70,
    MODULE_NN_GYROSCOPE = 71,
    MODULE_NN_MCU = 72,
    MODULE_NN_NS = 73,
    MODULE_NN_NEWS = 74,
    MODULE_NN_RO = 75,
    MODULE_NN_GD = 76,
    MODULE_NN_CARDSPI = 77,
    MODULE_NN_EC = 78,
    MODULE_NN_WEBBRS = 79,
    MODULE_NN_TEST = 80,
    MODULE_NN_ENC = 81,
    MODULE_NN_PIA = 82,
    MODULE_NN_MVD = 92, // TODO: Check
    MODULE_NN_QTM = 96, // TODO: Check
    MODULE_APPLICATION = 254,
    MODULE_INVALID_RESULT_VALUE = 255
} ErrorModule;

typedef enum {
    LEVEL_SUCCESS = 0,
    LEVEL_INFO = 1,
    LEVEL_STATUS = 25,
    LEVEL_TEMPORARY = 26,
    LEVEL_PERMANENT = 27,
    LEVEL_USAGE = 28,
    LEVEL_REINIT = 29,
    LEVEL_RESET = 30,
    LEVEL_FATAL = 31
} ErrorLevel;

typedef enum {
    SUMMARY_SUCCESS = 0,
    SUMMARY_NOTHING_HAPPENED = 1,
    SUMMARY_WOULD_BLOCK = 2,
    SUMMARY_OUT_OF_RESOURCE = 3,
    SUMMARY_NOT_FOUND = 4,
    SUMMARY_INVALID_STATE = 5,
    SUMMARY_NOT_SUPPORTED = 6,
    SUMMARY_INVALID_ARGUMENT = 7,
    SUMMARY_WRONG_ARGUMENT = 8,
    SUMMARY_CANCELED = 9,
    SUMMARY_STATUS_CHANGED = 10,
    SUMMARY_INTERNAL = 11,
    SUMMARY_INVALID_RESULT_VALUE = 63
} ErrorSummary;

typedef enum {
    DESCRIPTION_SUCCESS = 0,
    // TODO: Check from here...
    DESCRIPTION_INVALID_MEMORY_PERMISSIONS = 2,
    DESCRIPTION_INVALID_TICKET_VERSION = 4,
    DESCRIPTION_STRING_TOO_BIG = 5,
    DESCRIPTION_ACCESS_DENIED = 6,
    DESCRIPTION_STRING_TOO_SMALL = 7,
    DESCRIPTION_CAMERA_BUSY = 8,
    DESCRIPTION_NOT_ENOUGH_MEMORY = 10,
    DESCRIPTION_SESSION_CLOSED_BY_REMOTE = 26,
    DESCRIPTION_INVALID_NCCH = 37,
    DESCRIPTION_INVALID_TITLE_VERSION = 39,
    DESCRIPTION_DATABASE_DOES_NOT_EXIST = 43,
    DESCRIPTION_TRIED_TO_UNINSTALL_SYSTEM_APP = 44,
    DESCRIPTION_ARCHIVE_NOT_MOUNTED = 101,
    DESCRIPTION_REQUEST_TIMED_OUT = 105,
    DESCRIPTION_INVALID_SIGNATURE = 106,
    DESCRIPTION_TITLE_NOT_FOUND = 120,
    DESCRIPTION_GAMECARD_NOT_INSERTED = 141,
    DESCRIPTION_INVALID_FILE_OPEN_FLAGS = 230,
    DESCRIPTION_INVALID_CONFIGURATION = 271,
    DESCRIPTION_NCCH_HASH_CHECK_FAILED = 391,
    DESCRIPTION_AES_VERIFICATION_FAILED = 392,
    DESCRIPTION_INVALID_DATABASE = 393,
    DESCRIPTION_SAVE_HASH_CHECK_FAILED = 395,
    DESCRIPTION_COMMAND_PERMISSION_DENIED = 630,
    DESCRIPTION_INVALID_PATH = 702,
    DESCRIPTION_INCORRECT_READ_SIZE = 761,
    // TODO: ...to here.
    DESCRIPTION_INVALID_SELECTION = 1000,
    DESCRIPTION_TOO_LARGE = 1001,
    DESCRIPTION_NOT_AUTHORIZED = 1002,
    DESCRIPTION_ALREADY_DONE = 1003,
    DESCRIPTION_INVALID_SIZE = 1004,
    DESCRIPTION_INVALID_ENUM_VALUE = 1005,
    DESCRIPTION_INVALID_COMBINATION = 1006,
    DESCRIPTION_NO_DATA = 1007,
    DESCRIPTION_BUSY = 1008,
    DESCRIPTION_MISALIGNED_ADDRESS = 1009,
    DESCRIPTION_MISALIGNED_SIZE = 1010,
    DESCRIPTION_OUT_OF_MEMORY = 1011,
    DESCRIPTION_NOT_IMPLEMENTED = 1012,
    DESCRIPTION_INVALID_ADDRESS = 1013,
    DESCRIPTION_INVALID_POINTER = 1014,
    DESCRIPTION_INVALID_HANDLE = 1015,
    DESCRIPTION_NOT_INITIALIZED = 1016,
    DESCRIPTION_ALREADY_INITIALIZED = 1017,
    DESCRIPTION_NOT_FOUND = 1018,
    DESCRIPTION_CANCEL_REQUESTED = 1019,
    DESCRIPTION_ALREADY_EXISTS = 1020,
    DESCRIPTION_OUT_OF_RANGE = 1021,
    DESCRIPTION_TIMEOUT = 1022,
    DESCRIPTION_INVALID_RESULT_VALUE = 1023
} ErrorDescription;

typedef struct {
    u32 raw;
    ErrorModule module;
    ErrorLevel level;
    ErrorSummary summary;
    ErrorDescription description;
} Error;

bool platformInit();
void platformCleanup();

bool platformIsRunning();
bool platformIsNinjhax();

bool platformExecuteKernel(s32 (*func)());

u32 platformGetDeviceId();

bool platformIsWifiConnected();
bool platformWaitForInternet();
u8 platformGetWifiLevel();

bool platformIsBatteryCharging();
u8 platformGetBatteryLevel();

u64 platformGetTime();
void platformDelay(int ms);

void platformPrintf(const char* format, ...);

bool platformHasError();
Error platformGetError();
void platformSetError(Error error);
std::string platformGetErrorString(Error error);

#endif